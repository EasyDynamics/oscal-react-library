---
name: Create a New Release
on:
  workflow_dispatch:

concurrency: package-repo-release

permissions:
  contents: write

jobs:
  release:
    name: Create a New Release
    runs-on: ubuntu-latest
    steps:
      - name: Login as the automation app
        # This Action generates a token from the GitHub App and provides it as
        # an output. It _does_ register that token as a secret so that it will be
        # filtered from log output automatically
        id: generate-token
        # This maps to v1.6.0 https://github.com/tibdex/github-app-token/releases/tag/v1.6.0
        uses: tibdex/github-app-token@0914d50df753bbc42180d982a6550f195390069f
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: npm

      - name: Update NPM
        run: npm install -g npm@latest

      - name: Set Up Git User Info
        run: |
          git config --global user.email "info@easydynamics.com"
          git config --global user.name "Easy Dynamics Automation"

      # This is needed so that we can handle the situation where other
      # fixes have been applied to main and since we also need to push to
      # develop, we can't rewrite history
      - name: Pull the main branch and merge it into develop
        run: |
          git pull origin main --no-rebase

      # Increment the version to the next minor release
      # We install to update the example app's lock file to reference
      # the new version of the library.
      - name: Bump version
        run: |
          npx lerna version --conventional-commits --yes --no-tag-git-version --no-push -m "chore(release): bump version"
          git push origin develop:main
          git push origin develop:develop

      - name: Build OSCAL Viewer
        run: |
          npx lerna run build
          zip -r oscal-viewer.zip packages/oscal-viewer/build/

      # Output the new package version to environment variable
      - name: Get Package Version
        run: |
          echo "PKG_VERSION=$(npm pkg get version | tr -d '"')" >> $GITHUB_ENV
        working-directory: packages/oscal-react-library

      - name: Create a GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          tag_name: v${{ env.PKG_VERSION }}
          files:
            example/oscal-viewer.zip
          permissions: >-
            {
              "contents": "write"
            }
