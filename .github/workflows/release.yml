---
name: Create a New Release
on:
  workflow_dispatch:
    inputs:
      release-type:
        description: >-
          The type of release; either a new feature (minor version) or bug fix
          (patch version)
        required: true
        type: choice
        options: [feature, bug]

concurrency: package-repo-release

permissions:
  contents: write

jobs:
  release:
    name: Create a New Release
    runs-on: ubuntu-latest
    steps:
      - name: Login as the automation app
        # This Action generates a token from the GitHub App and provides it as
        # an output. It _does_ register that token as a secret so that it will be
        # filtered from log output automatically
        id: generate-token
        # This maps to v1.6.0 https://github.com/tibdex/github-app-token/releases/tag/v1.6.0
        uses: tibdex/github-app-token@f717b5ecd4534d3c4df4ce9b5c1c2214f0f7cd06
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: npm

      - name: Set release type to patch
        if: ${{ github.event.inputs.release-type == 'bug' }}
        run:
          echo 'NPM_RELEASE_TYPE=patch' >> $GITHUB_ENV
      - name: Set release type to minor
        if: ${{ github.event.inputs.release-type == 'feature' }}
        run:
          echo 'NPM_RELEASE_TYPE=minor' >> $GITHUB_ENV

      - name: Update Npm
        run: npm install -g npm@latest

      - name: Set Up Git User Info
        run: |
          git config --global user.email "info@easydynamics.com"
          git config --global user.name "Easy Dynamics Automation"

      # This is needed so that we can handle the situation where other
      # fixes have been applied to main and since we also need to push to
      # develop, we can't rewrite history
      - name: Pull the main branch and merge it into develop
        run: |
          git pull origin main --no-rebase

      # Increment the version to the next minor release
      # We install to update the example app's lock file to reference
      # the new version of the library.
      - name: Bump version
        run: |
          npm version $NPM_RELEASE_TYPE
          npm install
          cd example
          npm version $NPM_RELEASE_TYPE
          npm install
          cd ..

      - name: Build OSCAL Viewer
        run: |
          npm ci
          cd example
          npm ci
          npm run build
          zip -r oscal-viewer.zip ./build/

      # Output the new package version to environment variable
      - name: Get Package Version
        run: |
          echo "PKG_VERSION=$(npm pkg get version | tr -d '"')" >> $GITHUB_ENV

      - name: Push release commit to develop main
        run: |
          git add ./{,example/}package{,-lock}.json
          git commit -m "Release v${{ env.PKG_VERSION }}"
          git push origin develop
          git push origin develop:main

      - name: Create a GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          tag_name: v${{ env.PKG_VERSION }}
          body_path: .github/release.yml
          files:
            example/oscal-viewer.zip
          permissions: >-
            {
              "contents": "write"
            }

      # Commit the new version and push changes to main
      # And push a new prepatch version to develop. We assume prepatch
      # because we're going into develop and devs can always change this if
      # needed. But this means we push "x.y.(z+1)-0" instead of "x.(y+1).0-0".
      # This _does not_ get pushed to main
      - name: Start work on the next version
        run: |
          npm version prepatch
          cd example
          npm version prepatch
          cd ..
          git add ./{,example/}package{,-lock}.json
          git commit -m "Start work on v$(npm pkg get version | tr -d '"')"
          git push origin develop
