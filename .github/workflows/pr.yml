---
name: Run PR checks
on:
  pull_request:
  push:
    branches:
      - main
      - develop

jobs:
  lint:
    name: Lint the code base
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: "npm"
      - name: Globally update npm
        run: npm install -g npm@latest
      - name: Install dependencies
        run:
          npm ci && cd example && npm ci && cd ..
      - name: Lint Code Base
        # super-linter@v4.4.0 moves to using eslint for JSON files which in
        # our configuration results in JSON parsing failures. Temporarily,
        # pinning to @v4.3.0 (using jsonlint) allows validation to succeed
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: develop
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Our linter configuration files will be specified relative to the
          # root of the workspace (/) rather than within the default directory
          # (.github/linters)
          LINTER_RULES_PATH: /
          JAVASCRIPT_ES_CONFIG_FILE: .eslintrc.json
          MARKDOWN_CONFIG_FILE: .markdownlint.yaml
          # A specific subset of linters are enabled
          VALIDATE_HTML: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_MARKDOWN: true
          VALIDATE_JSON: true
          VALIDATE_YAML: true
          # Ideally, we should validate only changed files; we don't want to
          # have a PR fail because rules changed outside the PR itself.
          VALIDATE_ALL_CODEBASE: true
          # The possum is fun but it does add a little noise to the workflow
          SUPPRESS_POSSUM: true
  build_and_test:
    strategy:
      matrix:
        node: [14, 16]
    name: Build and test (on NodeJS ${{ matrix.node }})
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"
      - name: Globally update npm
        run: npm install -g npm@latest
      - name: Install dependencies
        run: npm ci && cd example && npm ci && cd ..
      - name: Build library
        run: npm run build
      - name: Run tests
        run: npm run test -- --ci --watchAll=false
      - name: Run example app tests
        run:
          cd example && npm run test -- --ci --watchAll=false && cd ..
      - name: Build application
        run:
          npm run predeploy
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: oscal-viewer
          path: example/build
